// Mocks generated by Mockito 5.0.7 from annotations
// in ndumeappflutter/test/data/testRepositoryImpl/login_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ndumeappflutter/core/failure.dart' as _i5;
import 'package:ndumeappflutter/data/apiService/base_api_service.dart' as _i3;
import 'package:ndumeappflutter/data/models/login_model.dart' as _i7;
import 'package:ndumeappflutter/data/sessionManager/session_manager.dart' as _i6;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [BaseAPIService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseAPIService extends _i1.Mock implements _i3.BaseAPIService {
  MockBaseAPIService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, dynamic>> executeAPI(
          {String? url, Map<String, dynamic>? queryParameters, _i3.ApiType? apiType}) =>
      (super.noSuchMethod(
          Invocation.method(
              #executeAPI, [], {#url: url, #queryParameters: queryParameters, #apiType: apiType}),
          returnValue: Future<_i2.Either<_i5.Failure, dynamic>>.value(
              _FakeEither<_i5.Failure, dynamic>())) as _i4
          .Future<_i2.Either<_i5.Failure, dynamic>>);
}

/// A class which mocks [SessionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionManager extends _i1.Mock implements _i6.SessionManager {
  MockSessionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initiateUserLogin(_i7.LoginModel? loginDetails) =>
      (super.noSuchMethod(Invocation.method(#initiateUserLogin, [loginDetails]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);

  @override
  String getToken() =>
      (super.noSuchMethod(Invocation.method(#getToken, []), returnValue: '') as String);

  @override
  void setMpesaToken(String? token) => super
      .noSuchMethod(Invocation.method(#setMpesaToken, [token]), returnValueForMissingStub: null);

  @override
  String getMpesaToken() =>
      (super.noSuchMethod(Invocation.method(#getMpesaToken, []), returnValue: '') as String);

  @override
  bool isUserLoggedIn() =>
      (super.noSuchMethod(Invocation.method(#isUserLoggedIn, []), returnValue: false) as bool);

  @override
  _i4.Future<void> initiateLogout() => (super.noSuchMethod(Invocation.method(#initiateLogout, []),
      returnValue: Future<void>.value(null),
      returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}
